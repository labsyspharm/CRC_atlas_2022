%% Import Cytell data from CSV file.
% Script for importing data from the following text file:
%
%    Z:\sorger\data\Cytell\Jerry\Jerry-96well(3603)-4channels-9sites_20140922_pRB_20140917\results-Cy5.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.
% Auto-generated by MATLAB on 2014/10/09 17:07:22; 
% Modified by Jerry 2014/10/09

%% Get directory

mypath = uigetdir('Z:\sorger\data\Cytell\Jerry');


%% Initialize variables.
filename = strcat(mypath,'\results-Cy5.csv');
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
resultsCy5 = table;
resultsCy5.VarName1 = cell2mat(raw(:, 1));
resultsCy5.well = cell2mat(raw(:, 2));
resultsCy5.Area = cell2mat(raw(:, 3));
resultsCy5.Mean = cell2mat(raw(:, 4));
resultsCy5.StdDev = cell2mat(raw(:, 5));
resultsCy5.Min = cell2mat(raw(:, 6));
resultsCy5.Max = cell2mat(raw(:, 7));
resultsCy5.X = cell2mat(raw(:, 8));
resultsCy5.Y = cell2mat(raw(:, 9));
resultsCy5.Perim = cell2mat(raw(:, 10));
resultsCy5.Circ = cell2mat(raw(:, 11));
resultsCy5.IntDen = cell2mat(raw(:, 12));
resultsCy5.Median = cell2mat(raw(:, 13));
resultsCy5.Skew = cell2mat(raw(:, 14));
resultsCy5.Kurt = cell2mat(raw(:, 15));
resultsCy5.VarName16 = cell2mat(raw(:, 16));
resultsCy5.RawIntDen = cell2mat(raw(:, 17));
resultsCy5.Slice = cell2mat(raw(:, 18));
resultsCy5.AR = cell2mat(raw(:, 19));
resultsCy5.Round = cell2mat(raw(:, 20));
resultsCy5.Solidity = cell2mat(raw(:, 21));
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    Z:\sorger\data\Cytell\Jerry\Jerry-96well(3603)-4channels-9sites_20140922_pRB_20140917\results-Cy3.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/10/09 17:07:22

%% Initialize variables.
filename = strcat(mypath,'\results-Cy3.csv');
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
resultsCy3 = table;
resultsCy3.VarName1 = cell2mat(raw(:, 1));
resultsCy3.well = cell2mat(raw(:, 2));
resultsCy3.Area = cell2mat(raw(:, 3));
resultsCy3.Mean = cell2mat(raw(:, 4));
resultsCy3.StdDev = cell2mat(raw(:, 5));
resultsCy3.Min = cell2mat(raw(:, 6));
resultsCy3.Max = cell2mat(raw(:, 7));
resultsCy3.X = cell2mat(raw(:, 8));
resultsCy3.Y = cell2mat(raw(:, 9));
resultsCy3.Perim = cell2mat(raw(:, 10));
resultsCy3.Circ = cell2mat(raw(:, 11));
resultsCy3.IntDen = cell2mat(raw(:, 12));
resultsCy3.Median = cell2mat(raw(:, 13));
resultsCy3.Skew = cell2mat(raw(:, 14));
resultsCy3.Kurt = cell2mat(raw(:, 15));
resultsCy3.VarName16 = cell2mat(raw(:, 16));
resultsCy3.RawIntDen = cell2mat(raw(:, 17));
resultsCy3.Slice = cell2mat(raw(:, 18));
resultsCy3.AR = cell2mat(raw(:, 19));
resultsCy3.Round = cell2mat(raw(:, 20));
resultsCy3.Solidity = cell2mat(raw(:, 21));
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    Z:\sorger\data\Cytell\Jerry\Jerry-96well(3603)-4channels-9sites_20140922_pRB_20140917\results-FITC.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/10/09 17:07:22

%% Initialize variables.
filename = strcat(mypath,'\results-FITC.csv');
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
resultsFITC = table;
resultsFITC.VarName1 = cell2mat(raw(:, 1));
resultsFITC.well = cell2mat(raw(:, 2));
resultsFITC.Area = cell2mat(raw(:, 3));
resultsFITC.Mean = cell2mat(raw(:, 4));
resultsFITC.StdDev = cell2mat(raw(:, 5));
resultsFITC.Min = cell2mat(raw(:, 6));
resultsFITC.Max = cell2mat(raw(:, 7));
resultsFITC.X = cell2mat(raw(:, 8));
resultsFITC.Y = cell2mat(raw(:, 9));
resultsFITC.Perim = cell2mat(raw(:, 10));
resultsFITC.Circ = cell2mat(raw(:, 11));
resultsFITC.IntDen = cell2mat(raw(:, 12));
resultsFITC.Median = cell2mat(raw(:, 13));
resultsFITC.Skew = cell2mat(raw(:, 14));
resultsFITC.Kurt = cell2mat(raw(:, 15));
resultsFITC.VarName16 = cell2mat(raw(:, 16));
resultsFITC.RawIntDen = cell2mat(raw(:, 17));
resultsFITC.Slice = cell2mat(raw(:, 18));
resultsFITC.AR = cell2mat(raw(:, 19));
resultsFITC.Round = cell2mat(raw(:, 20));
resultsFITC.Solidity = cell2mat(raw(:, 21));
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

%% Import data from text file.
% Script for importing data from the following text file:
%
%    Z:\sorger\data\Cytell\Jerry\Jerry-96well(3603)-4channels-9sites_20140922_pRB_20140917\results-DAPI.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2014/10/09 17:07:22

%% Initialize variables.
filename = strcat(mypath,'\results-DAPI.csv');
delimiter = ',';
startRow = 2;

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
resultsDAPI = table;
resultsDAPI.VarName1 = cell2mat(raw(:, 1));
resultsDAPI.well = cell2mat(raw(:, 2));
resultsDAPI.Area = cell2mat(raw(:, 3));
resultsDAPI.Mean = cell2mat(raw(:, 4));
resultsDAPI.StdDev = cell2mat(raw(:, 5));
resultsDAPI.Min = cell2mat(raw(:, 6));
resultsDAPI.Max = cell2mat(raw(:, 7));
resultsDAPI.X = cell2mat(raw(:, 8));
resultsDAPI.Y = cell2mat(raw(:, 9));
resultsDAPI.Perim = cell2mat(raw(:, 10));
resultsDAPI.Circ = cell2mat(raw(:, 11));
resultsDAPI.IntDen = cell2mat(raw(:, 12));
resultsDAPI.Median = cell2mat(raw(:, 13));
resultsDAPI.Skew = cell2mat(raw(:, 14));
resultsDAPI.Kurt = cell2mat(raw(:, 15));
resultsDAPI.VarName16 = cell2mat(raw(:, 16));
resultsDAPI.RawIntDen = cell2mat(raw(:, 17));
resultsDAPI.Slice = cell2mat(raw(:, 18));
resultsDAPI.AR = cell2mat(raw(:, 19));
resultsDAPI.Round = cell2mat(raw(:, 20));
resultsDAPI.Solidity = cell2mat(raw(:, 21));
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me R;

